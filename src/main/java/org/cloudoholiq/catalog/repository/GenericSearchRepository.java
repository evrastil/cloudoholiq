package org.cloudoholiq.catalog.repository;

import org.cloudoholiq.catalog.common.repository.JsonMapperFactory;
import org.cloudoholiq.catalog.model.Entity;
import org.cloudoholiq.catalog.search.GenericSearch;
import org.cloudoholiq.catalog.search.SearchQueryParam;
import org.cloudoholiq.catalog.search.SearchTranslator;
import org.skife.jdbi.v2.sqlobject.SqlQuery;
import org.skife.jdbi.v2.sqlobject.customizers.Define;
import org.skife.jdbi.v2.sqlobject.customizers.RegisterMapperFactory;
import org.skife.jdbi.v2.sqlobject.stringtemplate.UseStringTemplate3StatementLocator;

import java.util.List;

/**
 * Generic search class for postgres json field.
 */
@UseStringTemplate3StatementLocator
@RegisterMapperFactory(JsonMapperFactory.class)
public abstract class GenericSearchRepository<T extends Entity> extends GenericRepository<T> {

    private Class<T> clazz;

    private SearchTranslator searchTranslator = new SearchTranslator();

    protected GenericSearchRepository(Class<T> clazz) {
        super(clazz);
        this.clazz = clazz;
    }

    public List<T> search(SearchQueryParam searchQueryParam) {
        return search(getClazzName(), getClazzName().substring(0, 3), searchQueryParam);
    }

    private String getClazzName() {
        return clazz.getSimpleName().toLowerCase();
    }

    /**
     * Serves as template for generic search all parameters are generated by com.hp.propel.cat.catalog.dao.GenericSearchDao#search(com.hp.propel.cat.catalog.api.search.SearchQueryParam).
     *
     * @param tableCasts
     * @param filters
     * @param sorting
     * @param pagination
     * @return List<T extends EntitySummary>
     */
    @SqlQuery("SELECT DISTINCT entity, CAST(entity ->> 'timestamp' AS INT) <sortingFields> FROM <tableCasts> " +
            "WHERE 1=1 " +
            "<filters> " +
            "ORDER BY CAST(entity ->> 'timestamp' AS INT) ASC " +
            "<sorting> " +
            "<pagination>")
    public abstract List<T> search(@Define("tableCasts") String tableCasts,
                                   @Define("filters") String filters,
                                   @Define("sorting") String sorting,
                                   @Define("sortingFields") String sortingFields,
                                   @Define("pagination") String pagination);

    /**
     * Performs json field generic search.
     *
     * @param searchQueryParam
     * @return List<T extends Entity>
     */
    private List<T> search(String table, String tableAlias, SearchQueryParam searchQueryParam) {
        GenericSearch genericSearch = searchTranslator.createGenericSearch(table, tableAlias, searchQueryParam);
        return search(genericSearch.getAliasFields(),
                genericSearch.getFilters(),
                genericSearch.getSorting(),
                genericSearch.getSortingFields(),
                genericSearch.getPagination());

    }

    @SqlQuery("SELECT COUNT(DISTINCT entity) FROM <tableCasts> " +
            "WHERE 1=1 " +
            "<filters> ")
    public abstract long searchCount(@Define("tableCasts") String tableCasts,
                                   @Define("filters") String filters);

    private long searchCount(String table, String tableAlias, SearchQueryParam searchQueryParam) {
        GenericSearch genericSearch = searchTranslator.createGenericSearch(table, tableAlias, searchQueryParam);
        return searchCount(genericSearch.getAliasFields(),
                genericSearch.getFilters());
    }

    public long searchCount(SearchQueryParam searchQueryParam) {
        return searchCount(getClazzName(), getClazzName().substring(0, 3), searchQueryParam);
    }


}
